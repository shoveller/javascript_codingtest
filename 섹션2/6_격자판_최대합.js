function solution(행렬 = [[]]) {
    // 1. 각 열의 합을 구한다
    // 2. 각 행의 합을 구한다
    // 3. 두 대각선의 합을 구한다
    // 4. 1,2,3 중에 큰 수를 반환한다.

    const 왼쪽_대각선 = []
    const 오른쪽_대각선 = []
    const 열의_합 = []
    const 행의_합 = []
    행렬.forEach((열, 열_인덱스) => {
        열의_합.push(열.reduce((sum, curr) => sum + curr, 0))
        let 행_요소의_합 = 0
        열.forEach((행, 행_인덱스) => {
            // TODO: 2차원 배열을 탐색할 때, 행렬을 바꾸면 행 우선 탐색이 된다.
            행_요소의_합 += 행렬[행_인덱스][열_인덱스]
            if (열_인덱스 === 행_인덱스) {
                왼쪽_대각선.push(행)
            }
            if (열_인덱스 + 행_인덱스 === 열.length - 1) {
                오른쪽_대각선.push(행)
            }
        })
        행의_합.push(행_요소의_합)
    })

    return Math.max(...[
        왼쪽_대각선.reduce((sum, curr) => sum + curr),
        오른쪽_대각선.reduce((sum, curr) => sum + curr),
        ...열의_합,
        ...행의_합
    ])
}

let arr = [[10, 13, 10, 12, 15],
    [12, 39, 30, 23, 11],
    [11, 25, 50, 53, 15],
    [19, 27, 29, 37, 27],
    [19, 13, 30, 13, 19]];
console.log(solution(arr));
